import { API_CONFIG } from '@/lib/config'

export interface NotionPage {
  id: string
  title: string
  url: string
  created_time: string
}

export interface PitchDeckSlide {
  slideNumber: number
  title: string
  content: string
  type: string
}

export async function createNotionPage(title: string, content: string): Promise<NotionPage> {
  try {
    const pageData = {
      parent: { database_id: API_CONFIG.NOTION.DATABASE_ID },
      properties: {
        title: {
          title: [
            {
              text: {
                content: title
              }
            }
          ]
        }
      },
      children: [
        {
          object: 'block',
          type: 'paragraph',
          paragraph: {
            rich_text: [
              {
                type: 'text',
                text: {
                  content: content
                }
              }
            ]
          }
        }
      ]
    }

    const response = await fetch(`${API_CONFIG.NOTION.API_URL}/pages`, {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${API_CONFIG.NOTION.API_KEY}`,
        'Content-Type': 'application/json',
        'Notion-Version': '2022-06-28'
      },
      body: JSON.stringify(pageData)
    })

    if (!response.ok) {
      throw new Error('Failed to create Notion page')
    }

    const page = await response.json()
    return {
      id: page.id,
      title: title,
      url: page.url,
      created_time: page.created_time
    }
  } catch (error) {
    console.error('Error creating Notion page:', error)
    throw error
  }
}

export async function exportPitchDeckToNotion(blueprint: any, slides: PitchDeckSlide[]): Promise<NotionPage> {
  try {
    const title = `OpenIdeaX Pitch Deck: ${blueprint.title || 'Generated Blueprint'}`
    
    let content = `# ${title}\n\n`
    content += `**Generated by OpenIdeaX** - AI-powered open innovation platform\n\n`
    content += `## Blueprint Overview\n\n`
    content += `**Problem Statement:** ${blueprint.problemAnalysis || 'N/A'}\n\n`
    
    if (blueprint.sdg_alignment && blueprint.sdg_alignment.length > 0) {
      content += `## SDG Alignment\n\n`
      blueprint.sdg_alignment.forEach((sdg: any) => {
        content += `- **${sdg.sdg}**: ${sdg.alignment_score}% - ${sdg.description}\n`
      })
      content += '\n'
    }
    
    content += `## Pitch Deck Slides\n\n`
    
    slides.forEach((slide, index) => {
      content += `### Slide ${slide.slideNumber}: ${slide.title}\n\n`
      content += `${slide.content}\n\n`
      if (index < slides.length - 1) {
        content += '---\n\n'
      }
    })
    
    content += `## Next Steps\n\n`
    content += `1. Review and refine the blueprint\n`
    content += `2. Share with stakeholders\n`
    content += `3. Begin implementation planning\n`
    content += `4. Join the OpenIdeaX community for collaboration\n\n`
    content += `---\n\n`
    content += `*This pitch deck was generated using OpenIdeaX. Visit [OpenIdeaX](https://openideax.com) to create your own innovation blueprints.*`
    
    return await createNotionPage(title, content)
  } catch (error) {
    console.error('Error exporting pitch deck to Notion:', error)
    throw error
  }
}

export async function exportBlueprintToNotion(blueprint: any): Promise<NotionPage> {
  try {
    const title = `OpenIdeaX Blueprint: ${blueprint.title || 'Generated Blueprint'}`
    
    let content = `# ${title}\n\n`
    content += `**Generated by OpenIdeaX** - AI-powered open innovation platform\n\n`
    content += `## Problem Analysis\n\n`
    content += `${blueprint.problemAnalysis || 'No problem analysis available'}\n\n`
    
    if (blueprint.solutions && blueprint.solutions.length > 0) {
      content += `## Proposed Solutions\n\n`
      blueprint.solutions.forEach((solution: any, index: number) => {
        content += `### Solution ${index + 1}: ${solution.title}\n\n`
        content += `**Description:** ${solution.description}\n\n`
        content += `**Impact Score:** ${solution.impact}%\n\n`
        content += `**Timeline:** ${solution.timeline}\n\n`
        if (solution.resources && solution.resources.length > 0) {
          content += `**Required Resources:**\n`
          solution.resources.forEach((resource: string) => {
            content += `- ${resource}\n`
          })
          content += '\n'
        }
      })
    }
    
    if (blueprint.roadmap && blueprint.roadmap.length > 0) {
      content += `## Implementation Roadmap\n\n`
      blueprint.roadmap.forEach((phase: any, index: number) => {
        content += `### Phase ${index + 1}: ${phase.phase}\n\n`
        content += `**Duration:** ${phase.duration}\n\n`
        content += `**Tasks:** ${phase.tasks}\n\n`
        content += `**Description:** ${phase.description}\n\n`
      })
    }
    
    if (blueprint.sdg_alignment && blueprint.sdg_alignment.length > 0) {
      content += `## SDG Alignment\n\n`
      blueprint.sdg_alignment.forEach((sdg: any) => {
        content += `- **${sdg.sdg}**: ${sdg.alignment_score}% - ${sdg.description}\n`
      })
      content += '\n'
    }
    
    if (blueprint.estimated_budget) {
      content += `## Budget Estimate\n\n`
      content += `${blueprint.estimated_budget}\n\n`
    }
    
    if (blueprint.team_composition && blueprint.team_composition.length > 0) {
      content += `## Team Composition\n\n`
      blueprint.team_composition.forEach((role: string) => {
        content += `- ${role}\n`
      })
      content += '\n'
    }
    
    if (blueprint.success_metrics && blueprint.success_metrics.length > 0) {
      content += `## Success Metrics\n\n`
      blueprint.success_metrics.forEach((metric: string) => {
        content += `- ${metric}\n`
      })
      content += '\n'
    }
    
    content += `---\n\n`
    content += `*This blueprint was generated using OpenIdeaX. Visit [OpenIdeaX](https://openideax.com) to create your own innovation blueprints.*`
    
    return await createNotionPage(title, content)
  } catch (error) {
    console.error('Error exporting blueprint to Notion:', error)
    throw error
  }
}
