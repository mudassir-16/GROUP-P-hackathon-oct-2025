import { API_CONFIG } from '@/lib/config'

export interface GitHubBlueprint {
  id: string
  title: string
  description: string
  content: string
  tags: string[]
  sdg_alignment: number[]
  created_at: string
  updated_at: string
  stars: number
  forks: number
  views: number
}

export async function createGitHubGist(blueprint: any): Promise<string> {
  try {
    const gistContent = {
      description: `OpenIdeaX Blueprint: ${blueprint.title || 'Generated Blueprint'}`,
      public: true,
      files: {
        'blueprint.json': {
          content: JSON.stringify(blueprint, null, 2)
        },
        'README.md': {
          content: `# ${blueprint.title || 'Generated Blueprint'}

## Description
${blueprint.description || 'AI-generated innovation blueprint'}

## SDG Alignment
${blueprint.sdg_alignment?.map(sdg => `- ${sdg.sdg}: ${sdg.alignment_score}%`).join('\n') || 'No SDG alignment data'}

## Generated by OpenIdeaX
This blueprint was generated using OpenIdeaX - AI-powered open innovation platform.

## License
Creative Commons Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
`
        }
      }
    }

    const response = await fetch(`${API_CONFIG.GITHUB.API_URL}/gists`, {
      method: 'POST',
      headers: {
        'Authorization': `token ${API_CONFIG.GITHUB.TOKEN}`,
        'Accept': 'application/vnd.github.v3+json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(gistContent)
    })

    if (!response.ok) {
      throw new Error('Failed to create GitHub gist')
    }

    const gist = await response.json()
    return gist.html_url
  } catch (error) {
    console.error('Error creating GitHub gist:', error)
    throw error
  }
}

export async function fetchGitHubBlueprints(): Promise<GitHubBlueprint[]> {
  try {
    // This would typically fetch from a specific repository or organization
    // For now, we'll return mock data
    return [
      {
        id: '1',
        title: 'Sustainable Water Management System',
        description: 'AI-powered water conservation and management solution',
        content: 'Mock blueprint content...',
        tags: ['water', 'sustainability', 'iot'],
        sdg_alignment: [6, 13, 15],
        created_at: '2024-01-15T10:00:00Z',
        updated_at: '2024-01-20T15:30:00Z',
        stars: 45,
        forks: 12,
        views: 234
      },
      {
        id: '2',
        title: 'Digital Education Platform',
        description: 'Accessible online learning platform for underserved communities',
        content: 'Mock blueprint content...',
        tags: ['education', 'accessibility', 'platform'],
        sdg_alignment: [4, 10, 17],
        created_at: '2024-01-10T09:00:00Z',
        updated_at: '2024-01-18T14:20:00Z',
        stars: 78,
        forks: 23,
        views: 456
      },
      {
        id: '3',
        title: 'Renewable Energy Microgrid',
        description: 'Community-based renewable energy distribution system',
        content: 'Mock blueprint content...',
        tags: ['energy', 'renewable', 'community'],
        sdg_alignment: [7, 11, 13],
        created_at: '2024-01-05T08:00:00Z',
        updated_at: '2024-01-22T16:45:00Z',
        stars: 92,
        forks: 18,
        views: 678
      }
    ]
  } catch (error) {
    console.error('Error fetching GitHub blueprints:', error)
    return []
  }
}

export async function starBlueprint(blueprintId: string): Promise<boolean> {
  try {
    // This would typically interact with GitHub's API to star a gist
    console.log(`Starring blueprint ${blueprintId}`)
    return true
  } catch (error) {
    console.error('Error starring blueprint:', error)
    return false
  }
}

export async function forkBlueprint(blueprintId: string): Promise<string> {
  try {
    // This would typically fork a GitHub gist
    console.log(`Forking blueprint ${blueprintId}`)
    return `https://github.com/forked-blueprint-${blueprintId}`
  } catch (error) {
    console.error('Error forking blueprint:', error)
    throw error
  }
}
