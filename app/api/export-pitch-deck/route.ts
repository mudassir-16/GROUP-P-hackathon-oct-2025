export async function POST(request: Request) {
  try {
    const { slides, format, blueprint } = await request.json()

    if (format === "pdf") {
      // Generate PDF content
      const pdfContent = generatePDFContent(slides, blueprint)
      return new Response(pdfContent, {
        headers: {
          "Content-Type": "application/pdf",
          "Content-Disposition": "attachment; filename=pitch-deck.pdf",
        },
      })
    } else if (format === "notion") {
      // Generate Notion-compatible markdown
      const markdownContent = generateNotionMarkdown(slides, blueprint)
      return new Response(markdownContent, {
        headers: {
          "Content-Type": "text/markdown",
          "Content-Disposition": "attachment; filename=pitch-deck.md",
        },
      })
    } else if (format === "slides") {
      // Generate Google Slides compatible content
      const slidesContent = generateSlidesContent(slides, blueprint)
      return new Response(slidesContent, {
        headers: {
          "Content-Type": "application/json",
          "Content-Disposition": "attachment; filename=pitch-deck.json",
        },
      })
    }

    return Response.json({ success: false, error: "Unsupported format" }, { status: 400 })
  } catch (error) {
    console.error("Export error:", error)
    return Response.json(
      {
        success: false,
        error: error instanceof Error ? error.message : "Failed to export pitch deck",
      },
      { status: 500 },
    )
  }
}

function generatePDFContent(slides: any[], blueprint: any): string {
  // This would typically use a PDF generation library like Puppeteer or jsPDF
  // For demo purposes, return a simple text representation
  let content = `Pitch Deck: ${blueprint.title || "Innovation Blueprint"}\n\n`
  
  slides.forEach((slide, index) => {
    content += `Slide ${index + 1}: ${slide.title}\n`
    content += `${slide.content}\n\n`
  })
  
  return content
}

function generateNotionMarkdown(slides: any[], blueprint: any): string {
  let markdown = `# ${blueprint.title || "Innovation Blueprint"}\n\n`
  markdown += `**Generated by OpenIdeaX**\n\n`
  
  slides.forEach((slide, index) => {
    markdown += `## Slide ${index + 1}: ${slide.title}\n\n`
    markdown += `${slide.content}\n\n`
    markdown += "---\n\n"
  })
  
  return markdown
}

function generateSlidesContent(slides: any[], blueprint: any): string {
  const slidesData = {
    title: blueprint.title || "Innovation Blueprint",
    slides: slides.map((slide, index) => ({
      slideNumber: index + 1,
      title: slide.title,
      content: slide.content,
      type: slide.type
    })),
    metadata: {
      generatedAt: new Date().toISOString(),
      source: "OpenIdeaX",
      blueprintId: blueprint.id
    }
  }
  
  return JSON.stringify(slidesData, null, 2)
}
